IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024 2539
ANDVI: Automated Network Device and
Vulnerability Identification in SCADA/ICS
by Passive Monitoring
Alaa T. AL Ghazo , Member, IEEE, and Ratnesh Kumar , Fellow, IEEE
Abstract—Supervisory control and data acquisition (SCADA) and industrial control systems (ICSs) are designed to operate for extended periods of time and can withstand extreme conditions. However, operators, engineers, and offices change over time, which can lead to outdated documentation and references. This can make it difficult to identify system components and their vulnerabilities, which can pose a security risk. In this article, we present an automated passive method for identifying system components based on network traffic structure and network message characteristics. The proposed approach considers both TCP/IP and Modbus, the two primary communication protocols in SCADA, to identify devices. The algorithm was implemented in Python and evaluated using water treatment SCADA data collected from the iTrust facility. Once the system devices have been identified, the algorithm queries the National Vulnerability Database (NVD) and the Common Vulnerabilities and Exposures (CVE) databases to identify each device’s known vulnerabilities. Using our research on automated attack graph generation and visualization (A2G2V) and strongly connected component induced min label cut (SCCiMLC), we can map device vulnerabilities to system-level attack graphs and identify the bare minimum of device vulnerabilities to mitigate in order to secure the entire system. The proposed technique has been demonstrated to be beneficial in identifying system components in SCADA and ICS systems to increase their security.
Index Terms—Cyber–physical systems (CPSs), device recognition, industrial control systems (ICSs), Internet of Things, Modbus, security, supervisory control and data acquisition (SCADA) TCP/IP.
I. INTRODUCTION
S
UPERVISORY control and data acquisition (SCADA) and industrial controls systems (ICSs) systems have distinct characteristics. They are specialized, distributed, networked arrangements that interface with physical components through sensors, actuators, controllers, and monitors. These
Manuscript received 4 October 2023; accepted 15 December 2023. Date of publication 15 January 2024; date of current version 19 March 2024. This work was supported in part by the National Science Foundation under Grant NSF-CSSI-2004766 and Grant NSF-PFI-2141084, and in part by the Rockwell Collins through the NSF-IUCRC, S2ERC. This article was recommended by Associate Editor D. Yue. (Corresponding author: Alaa T. AL Ghazo.)
Alaa T. AL Ghazo is with the Department of Mechatronics Engineering, Faculty of Engineering, The Hashemite University, Zarqa 13133, Jordan (e-mail: alghazo@hu.edu.jo). Ratnesh Kumar is with the Department of Electrical and Computer Engineering, Iowa State University, Ames, IA 50014 USA (e-mail: rkumar@ iastate.edu). Color versions of one or more figures in this article are available at https://doi.org/10.1109/TSMC.2023.3345254. Digital Object Identifier 10.1109/TSMC.2023.3345254
systems play a fundamental role in supervising and controlling critical infrastructure. Their integration with cloud technology has removed their previous offline operation, introducing heightened susceptibility to cyberattacks [1], [2], [3]. Independent contractors typically install these systems, which are then maintained by on-site engineers and exhibit long-time durability. Consequently, tracking updates and maintaining accurate component information (such as model and supplier) pose challenges, rendering their documentation outdated and potentially leading to unknown security vulnerabilities. A Homeland Security analysis of common vulnerabilities in SCADA/ICS highlighted discrepancies between documented records and actual system configurations due to inadequate updates following device modifications [4]. Such legacy systems remain prevalent worldwide and become especially crucial during emergencies, presenting points of security weaknesses despite their resilience to disasters due to lack of documentation. Identification of supplier/model details enables the linkage of devices to existing vulnerability databases, facilitating system administrators in comprehending their network’s structure and components without intrusion. This understanding assists in prioritizing cybersecurity measures, crucial for optimizing resource allocation toward security enhancement amidst budgetary constraints. Manual device identification processes are both resource-intensive and expensive. Moreover, challenges arise from devices spread across extensive territories, sometimes within hazardous environments. Manual identification might also necessitate halting plant operations to access control cabinets and examine each device—a scenario uncommon in conventional IT setups. The automated network fingerprinting has merit and can be either “active” or “passive.” Active fingerprinting actively requests data from network devices, like probing an IP address and analyzing the response [5]. However, applying active methods can impact the performance of real-time processes in SCADA/ICS networks due to their latency requirements. Additionally, legacy control networks might fail to handle unknown packets introduced for active probing, thereby disrupting the underlying physical system. Several cases highlight the issues associated with active fingerprinting. 1) Peterson [6] outlined a case where a programmable logic controller (PLC) was observed to irrecoverably crash following a simple port scan.
2168-2216 c© 2024 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2540 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
2) Duggan et al. [7] reported that when a ping sweep was used to gain information about the devices connected to the network, it caused a certain robotic arm to move 180◦, despite it being in standby mode before the sweep was initiated. 3) Duggan et al. [7] reported a case of a penetration test conducted on a SCADA/ICS system responsible for gas utility. As a result of this, the system froze, meaning no gas could be distributed outside of the plant, causing a loss of services for 4 h. Given these complications, active fingerprinting is not advisable for SCADA/ICS systems. Instead, a network sniffer can passively monitor and assess system device traffic. However, this task is more challenging for SCADA/ICS compared to IT networks due to the absence of explicit signature features in SCADA/ICS network packets, primarily due to basic hardware lacking extra-functional signature capabilities. In contrast, network traffic in IT infrastructure has well-defined distinguishable features enabling straightforward passive fingerprinting [8]. With these considerations, the proposed method, automated network device and vulnerability identification (ANDVI), employs passive observation of network packets to discover SCADA/ICS devices and their connections. Our approach employs a hybrid process that combines communication patterns and device fingerprints. Initially, it determines a device’s control hierarchy level using source–destination data from packet headers. Subsequently, each device’s fingerprints are identified by analyzing communication packet headers and extracting device-specific values. For control hierarchy determination, we leverage the hierarchical network topology of SCADA/ICS systems: 1) specific devices communicate only with preprogrammed counterparts and 2) devices utilize a chain-of-command communication structure to avoid command conflicts. This implies the existence of a control hierarchy among network devices, aiding in identifying device types (e.g., SCADA station, human–machine interface (HMI), and PLC). Accordingly, our method first infers the device’s control hierarchy, reducing recognition complexity and using fewer packet attributes for device identification. We introduce an approach to ascertain device hierarchy levels by scrutinizing packet communication patterns. Subsequently, additional passive fingerprinting is conducted to enhance device recognition. During the learning phase, network data accumulates in a reference database. In the recognition phase, device models and suppliers are determined by comparing packet header information with reference database entries. Our proposed ANDVI method automates passive device recognition and integrates vulnerability mapping and ranking. Minimal data collection point determination presents another challenge in passive device fingerprinting. In hierarchical SCADA/ICS systems, packets only exist between the nearest parent-child device pairs. Hence, data collection must occur at each device. Yet, in some cases, routers interconnect multiple child devices to a shared parent, reducing data collection points as routers and parent devices can both serve as collection points. This concept is outlined for SCADA/ICS
networks utilizing Modbus, a prevalent application-layer protocol for device communication [9]. We implemented the hybrid device recognition approach in Python and tested it with traffic data from a water treatment testbed [10]. Our reference fingerprint database was constructed from data reported in [10], [11], and [12], encompassing a range of SCADA/ICS devices from various vendors, ensuring the generality of our approach. Where [10] described a water treatment testbed controlled by Allen Bradly PLCs, HMI, and SCADA station; [11] presented a subsystem consisting of Direct Logic 205, Siemens S7 1200, and a SCADA station; and finally, [12] provided one-to-one communication between a SCADA station and Siemens S7 1500, S7 1200, S7 300, and S7 400 PLCs. In other words, our reference dataset represents a variety of SCADA/ICS devices from different vendors to be able to validate the generality of our approach. We also implemented our Modbus-data-based device recognition approach in Python and tested it on traffic data from a water treatment SCADA system. The final phase of our work, ANDVI, involves mapping detected devices to known vulnerabilities. This entails extracting data from the National Vulnerability Database (NVD) and the Common Vulnerabilities and Exposures (CVE) database. It is important to note that our study’s scope is limited to recognizing network devices and linking them to known vulnerabilities. To address unknown vulnerabilities, active or passive anomaly detection, and root cause identification would be required. Readers seeking insights into discovering new vulnerabilities can refer to [13] and [14]. The main contributions of the work presented here are as follows. 1) To the best of our knowledge, for the first time, the SCADA/ICS communication pattern is used to identify the device control hierarchy level, which is next used to refine the device recognition. 2) To the best of our knowledge, for the first time, a passive fingerprinting approach is proposed to identify the SCADA/ICS devices employing Modbus protocol, by mapping out the read/write registers of the devices and comparing those to a reference database. 3) To the best of our knowledge, for the first time, a hybrid communication-pattern and passive fingerprinting approach is proposed to identify the SCADA/ICS devices’ type, manufacturer, and model. 4) We developed a software implementation for the proposed hybrid approach for non-Modbus systems and reported its validation using data from a real-world water treatment cyber–physical system (CPS) system from iTrust [10]. We also developed a software implementation of the Modbus-data analysis-based passive fingerprinting approach, and its validation using a simulated water treatment CPS. 5) We integrated our device recognition algorithms with existing vulnerabilities databases to automatically identify the devices and their associated known vulnerabilities. This article greatly expands upon the conference edition [15] through the introduction of a Modbus-data
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


AL GHAZO AND KUMAR: ANDVI IN SCADA/ICS BY PASSIVE MONITORING 2541
analysis-driven method for SCADA/ICS device fingerprinting, as part of the Ph.D. thesis research [16]. This approach, along with its implementation and validation, enhances the practicality within real-world SCADA/ICS systems. Furthermore, an additional section delves into the selection of a minimal data collection set. The added developments also integrate the suggested algorithms with vulnerability databases, enabling the automatic recognition of system components and their established vulnerabilities. Consequently, this comprehensive implementation completes the ANDVI framework.
A. Related Works
To our knowledge, our framework stands as the first passive approach capable of fingerprinting SCADA/ICS system devices. This fingerprinting is subsequently linked to vulnerability databases to identify potential known vulnerabilities within these devices. In contrast, passive data analysis tools, such as [17], focus on detecting malicious sources through network traffic with a level of statistical accuracy, addressing a distinct issue from identifying the manufacturer and model number of network devices. Notably, the traffic patterns of two diverse PLC models might appear identical, rendering traffic pattern analysis insufficient for distinguishing between them. Previous efforts include [18], which utilized TCP/IP information for device fingerprinting, and [19], which generated fingerprints based on response times. However, these approaches lack device-model specificity, limiting the precision of device recognition. Jeon et al. [20] identified device types based on SCADA/ICS communication patterns but were restricted to 2-layered systems. Caselli et al. [8] explored existing SCADA/ICS device fingerprinting methods without introducing new ones, noting their incompatibility with current tools. Bodenheim et al. [21] evaluated the Shadon search engine’s threat to SCADA/ICS systems and proposed a mitigation technique but did not suggest a device recognition method. Several studies have proposed component identification approaches for SCADA/ICS, yet most involve active fingerprinting: [22] proposed device identification based on specific SCADA protocol functions, while the Shadon SCADA search engine [23] inspired works like [24] and [25], employing port scanning to identify SCADA devices. However, these methods rely on active fingerprinting, which has inherent limitations as previously mentioned. Other active fingerprinting approaches include Nmap [26] and Nessus [27]. Additionally, we have not encountered any work that applies Nmap, Nessus, or Splunk to SCADA/ICS device recognition. Finally, techniques for attacking SCADA/ICS systems constitute a separate topic, with interested readers referred to [28] and [29]. Some studies have explored the application of machine learning techniques for device fingerprinting in the context of network intrusion detection. This involves verifying the authenticity of the packet sender to distinguish legitimate nodes from potential attackers. Additionally, these studies have aimed to assist in forensic investigations by tracing back the origins of packets and establishing accountability. However, these studies’ focus is out of the scope of this article as we
Fig. 1. Hybrid approach for devices recognition.
address the problem of identifying the SCADA/ICS devices’ type, manufacturer, and model. Readers who are interested are encouraged to refer to [30], [31], and [32].
II. PROPOSED ANDVI APPROACH
Illustrated in Fig. 1 is the architecture of the novel hybrid method devised for identifying devices within a SCADA/ICS network. This approach centers around passive fingerprinting derived from packet headers. The process comprises two distinct phases. In the initial offline learning stage, a reference fingerprints database is established through a known SCADA/ICS system encompassing a designated array of devices. The establishment of this database necessitates the identification of dependable, distinguishing attributes present in the captured packets, serving as exclusive fingerprints for individual devices. The subsequent online recognition phase involves the processing of packets obtained from an unfamiliar SCADA/ICS system with unrecognized devices. These packets are subjected to a two-step algorithm, encompassing a control hierarchy identification phase followed by a device fingerprinting stage. Since these two steps are quite different, to help with readership, we present each step in its own section (Section III for control hierarchy, Section IV for fingerprinting from non-Modbus, i.e., TCP/IP-data, and Section V for fingerprinting from Modbus-data). Also for clarity to the readers, we present in each of these sections their own clearly marked subsections on approach versus illustrations. While the illustration in Section III demonstrates only the control hierarchy for both TCP/IP and Modbus data, the illustrations of Section IV (for TCP/IP data) and Section V (for Modbus data) are comprehensive, demonstrating both the control hierarchy determination and fingerprinting steps. After the identification of SCADA/ICS devices, their potential known vulnerabilities are automatically mapped using our ANDVI framework, as presented in Fig. 2 within the overarching ANDVI architecture. The most dependable vulnerability databases in this context are the CVE database and the NVD. CVE, overseen by the United States Department of Homeland Security, catalogs recognized security threats. NVD, on
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2542 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
Fig. 2. ANDVI framework.
the other hand, serves as a U.S. government repository for standardized vulnerabilities, encompassing security-related software flaws, misconfigurations, product details, and impact metrics. The insights provided by these databases are seamlessly integrated with our device recognition algorithms to automatically detect system devices along with their associated known vulnerabilities. In the process, our ANDVI tool takes the output from either of the two device identification approaches and cross-references the identified devices with their corresponding vulnerabilities documented in the CVE databases. Subsequently, it utilizes the NVD database to prioritize these vulnerabilities based on their NVD threat index values. For the determination of control hierarchy and device fingerprints, the collected communication packets undergo processing to extract two distinct arrays of features. Features1 captures control hierarchy-related data, utilizing a dual-column format for each packet. Column 1 records the packet’s source, while column 2 registers the destination. Meanwhile, Features2 captures data pertinent to device fingerprinting, adopting a tricolumn structure for each captured packet, with each column documenting one of the three distinct packet features as elaborated below. In achieving comprehensive device recognition, it is imperative that the captured packets encompass all devices within the SCADA/ICS network, an assumption we maintain.
III. CONTROL HIERARCHY DETERMINATION
The established control hierarchy within SCADA/ICS systems conforms to the standard architecture depicted in Fig. 3 [33]. This hierarchy is designed to mitigate conflicts in control commands, necessitating communication between each node and its immediate parent, children, or nodes situated at the same tier. This attribute forms the basis for identifying the level of SCADA/ICS devices using our control hierarchy identification algorithm (detailed as Algorithm 1 in Section III). Gaining insight into the device’s control hierarchy level enables us to deduce its type; for instance, a local controller level corresponds to a PLC, while a plant supervisory controller level can be an HMI or SCADA station. Similarly, a production coordinator controller level and a control center level both indicate SCADA stations. Control hierarchy level identification becomes valuable when SCADA/ICS devices within a single system stem from
Fig. 3. Standard SCADA/ICS control hierarchy.
Algorithm 1 Control Hierarchy Identification Algorithm 1: Input: Set of packets 2: Output: sources S, control levels Lk, k ≥ 0, control level mapping C:S → ∪kLk that maps each source s ∈ S to its control level C(s) ∈ Lk for some k ≥ 0 3: main
4: for each source s, add it to a set S, and also construct its destination Ds 5: compare Ds for all s ∈ S 6: group sources with same destinations into groups Gi’s 7: ∀i:Gi ⊆ L0 if ∀j:Gj ⊂ Gi 8: ∀i, ∀k ≥ 0: Gi ⊆ Lk + 1 if (∃s ∈ Lk:Ds ⊆ Gi)∧( l ≤ k:Gi ⊆ Ll)
9: Terminate when all s ∈ S are mapped to some level k ≥ 0.
identical vendors and employ uniform programmer protocols. Under these circumstances, various types of SCADA/ICS devices may exhibit akin TCP/IP packet header attributes, thereby presenting a challenge in solely discerning devices through communication packets. Nonetheless, by initially deducing their control hierarchy, we gain the capability to determine device types (such as PLC or HMI). This preliminary insight, coupled with the discernible communication packet features (encompassing the subsequent step), synergistically refines device identification.
A. Approach
In upholding elevated levels of reliability and safety, the architecture and communication of SCADA/ICS systems adhere to the standards of IEC 6113 [34] and IEC 62264 [35]. Drawing from this standardized control hierarchy framework, we establish the level of SCADA/ICS devices as articulated in the subsequent Algorithm 1. The algorithm operates in a bottom-up progression. It commences by identifying the lowest tier devices (referred to as level-0 or L0) within the control hierarchy. Once devices at a particular level are established, the devices constituting the subsequent level can be identified by tracing back to their sources. The identification of level-0 devices involves initially
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


AL GHAZO AND KUMAR: ANDVI IN SCADA/ICS BY PASSIVE MONITORING 2543
Fig. 4. Control hierarchy identification example.
grouping devices with the same destinations. Subsequently, level-0 devices encompass the members of these groups, provided that their destinations are not greater than those of any other groups. Upon identifying level-0 devices, the process of identifying higher levels becomes simplified. For a given level- k (designated as Lk) involving devices where k ≥ 0, the set of destination devices not belonging to any lower levels shapes the level-(k + 1) devices, noted as Lk+1. The algorithm reaches its conclusion once all devices are appropriately assigned within one of the recognized levels In contrast to the TCP/IP-data packets, the Modbus-based data are exchanged following a leader–follower protocol in which the leader device sends requests to follower devices. Modbus exchanged messages and thus incorporate this information by specifying whether a device is a leader or a follower. Thereby, monitoring such a feature allows for the immediate identification of the control hierarchy in the setting of Modbus.
B. Illustration
Here, we use the example in Fig. 4 as a running example to illustrate these ideas. Initially, using the Features1 data, which contains the list of all source–destination pairs, we compute the list of destination devices Ds for each source node s, which includes any node that receives packets from node s and the node s itself. In Fig. 4, for example: Ds1 = {s1, s2, s3, s6, s7}, Ds3 = {s3, s2, s1, s6, s7}, Ds2 = {s2, s1, s3, s7}, Ds4 = {s4, s5, s8}, and Ds5 = {s5, s4, s8}. Next, we identify the sources that are at the bottom of the control hierarchy. For this, the sources with identical destinations are grouped together into their own single groups. Then, the sources in those groups are at the bottom of the control hierarchy if their destinations are no larger than those of any other groups. For example, since Ds1 = Ds3 , we group those into the group, G1 = {s1, s3}. Similarly, G2 = {s2}, G3 = {s4, s5}, G4 = {s9}, etc. Next, the groups whose destinations are not larger than any of the other groups’ destinations are identified. So for example, the destinations of G1 and G2 are smaller than those of group G5 = {s6, s7} whose destinations are Ds6 = Ds7 = {s1, s2, s3, s6, s7, s9}, whereas the destinations of G3 includes
s8 that is not a destination for G1 or G2, etc. Similarly, the destination of G3 namely, {s4, s5, s8}, are smaller than the destination of G6, namely, {s4, s5, s8, s9}, etc. With such grouping and destination comparison, the sources in G1, G2, and G3 are identified to be the lowest level groups in the control hierarchy, and this is recorded in L0 = G1 ∪ G2 ∪ G3. Once the level-k sources in Lk get recorded for any k ≥ 0, the level-(k+1) sources in Lk+1 are identified as the union of those groups which contain a destination of a level-k source, and which do not belong to the level-k or lower. So for example, L1 = G5 ∪ G6, and next L2 = G4. The control hierarchy identification is simpler for the Modbus case which uses the leader–follower protocol and marks that information within each communicated packet. So for the example of Fig. 4, examining the Modbus messages reveals that {s1, s2, s3} are follower PLCs for both s6 and s7, {s6, s7, s8} are follower PLCs for s9, and {s4, s5} are follower PLCs for s8. Using this information, the devices are mapped into their control hierarchy level in a straightforward manner, providing the same result as above.
IV. FINGERPRINTING FROM NON-MODBUS (TCP/IP)-DATA
A fundamental element of device recognition involves constructing a reference fingerprints database. This is achieved through the analysis of captured packets originating from a SCADA/ICS network possessing recognized devices. The process entails singling out distinct features within the communication packets, whose values exclusively pertain to the individual devices.
A. Approach and Results
To pinpoint distinctive attributes within the captured TCP/IP network traffic, we scrutinized data generated by a variety of SCADA/ICS devices, including Allen Bradley Logix 1765 PLC, Siemens S1200 PLC, Siemens S1500 PLC, Siemens S7 300 PLC, Siemens S7 400, and DirectLogic 205 PLC [10], [11], [12]. A total of 20 TCP/IP packet header features were evaluated. Due to space constraints, Fig. 3 showcases 7 out of these 20 features, namely, frame length, vendor MAC ID, TCP-segment length, IP identification numbers, total IP packet length, time to live, and TCP window size, to illustrate our fingerprinting methodology. Among these seven features, three emerged as unique identifiers for devices. These three features are elaborated upon in greater detail below. 1) Time-to-Live (TTL): Upon packet generation, the source designates a time span called TTL, denoted as TTL, which signifies the packet’s validity duration. Consistently, packets from the same source/model possess identical initial TTL values, rendering this a distinguishing feature.
2) IP Identification Difference (IP · IDdiff): The source also determines the packet ID, which incrementally increases by fixed amounts. These increments differ across distinct sources/models, serving as another distinguishing factor. 3) Vendor MAC ID (VendorMAC): Each generated packet discloses the source MAC address, the first four bytes of
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2544 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
Fig. 5. PLCs data analysis.
which constitute the vendor ID. By leveraging databases listing vendors and their MAC vendor IDs, such as the OUI Lookup Tool from Wireshark [36] it becomes possible to identify the device manufacturer. Typically, vendors utilize multiple MAC vendor IDs, often specific to different factories or manufacturing periods. This further differentiation aids in distinguishing devices from the same vendor. For example, Siemens S1200 (manufactured by Siemens Numerical Control Ltd.) has a MAC vendor ID of 001C06, while S1500 (manufactured by Siemens AG) bears a MAC vendor ID of 001B1B. Analytical results of packet feature values for distinct packets and devices are presented in Fig. 5. Each diagram corresponds to a single device, where the x-axis represents discrete values corresponding to the seven aforementioned features, and the y-axis portrays discrete numeric values indicating packet feature values. For instance, the first diagram depicts packets from the S7 1500 device. Noticeably, various SCADA/ICS packet features from the same device exhibit variability among packets, with the exception of the three distinct features aforementioned, which remain constant. These three features suffice to differentiate among various PLCs. Specifically, these features are: time to live TTL, the disparity between IP.IDs of consecutive packets (designated as IP · IDdiff), and the vendor MAC ID (VendorMAC). Notably, as TTL, VendorMAC, and IP · IDdiff could, respectively, assume 255 (1 byte4.294 × 109 (4 bytes), and 65.535 × 103 (2 bytes) values, leveraging these three attributes potentially allows the differentiation of up to (255×(4.294×109)×(65.535×103) = 7.176×1016) devices. Table I presents a summary of the outcomes derived from our examination of communication packets. It compiles these findings into three unique attributes: TTL, IP · IDdiff, and VendorMAC. These attributes serve as identifiers for pinpointing the manufacturer and model of a device. The table showcases the reference database formed through communication patterns during the initial learning stage of our
TABLE I SCADA/ICS DISTINGUISHING FEATURES SUMMARY
Fig. 6. Logix 1765 PLC and the Allen Bradly HMI data analysis.
methodology for distinguishing between various SCADA/ICS devices. Take note that the three packet characteristics mentioned earlier remain consistent within packets originating from a single device. Nevertheless, it is possible for multiple devices to share the same set of three characteristics. For instance, consider the Logix 1765 PLC and the Allen Bradley HMI; both devices possess an identical trio of TCP/IP features, as illustrated in Fig. 6. Despite this similarity, these devices are positioned differently within the control hierarchy. As a result, our methodology leverages supplementary information regarding the control hierarchy to enhance device identification accuracy.
B. CPS Case Study: iTrust Water Treatment SCADA
To illustrate the practical application of our algorithm in a tangible CPS, we opted for a water treatment system as a case example (depicted in Fig. 7). This system is an operational water treatment CPS testbed housed within the iTrust laboratory [10]. Constituent elements of the system encompass PLCs, HMIs, a SCADA workstation, and a SCADA Server. Orchestrating the water treatment’s six stages, the six PLCs wield control, while the HMI and SCADA station exercise monitoring and coordination over the PLCs. In turn, the SCADA station communicates with and manages the SCADA server. The configuration of these devices along with their control hierarchy is visually represented in Fig. 7. The dataset for the Secure Water Treatment testbed encompasses continuous normal operation data spanning seven days. To effectively recognize devices, a complete control cycle’s worth of data is necessary. Consequently, for our purposes, we focused on analyzing network traffic during a 4-h window of normal operation, which proved sufficient. Data from the pcap capture files were extracted and transformed into CSV files utilizing Tshark [37]. Initially, a preprocessing procedure was applied to the collected packets to derive the matrices labeled Features1 and Features2. The algorithm commenced by enumerating a set of sources, denoted as S, and the destination subsets Ds for each source s within S. Among these, nine sources were identified.
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


AL GHAZO AND KUMAR: ANDVI IN SCADA/ICS BY PASSIVE MONITORING 2545
Fig. 7. Architecture of iTrust Water Treatment SCADA.
Fig. 8. iTrust Water Treatment SCADA control hierarchy identification output.
Subsequently, a random selection, s = 192.168.1.10, led to a comparison of its set of destinations against those of other devices. This process culminated in the grouping of 192.168.1.10, 192.168.1.20, 192.168.1.30, 192.168.1.40, 192.168.1.50, and 192.168.1.60, forming Group G1. In a similar manner, selecting s = 192.168.1.100 and comparing its destinations with those of the remaining devices resulted in Group G2 = {192.168.1.200, 192.168.100}. Finally, with s = 192.168.1.201 as the final selected source within S, Group G3 was established as {192.168.1.201}. Notably, G1 stands apart by not being a subset of any other group, leading to L0 being identified as G1. Given that G2 encompasses the destinations of G1 devices, L1 equates to G2. Similarly, G3 covers the destinations of G2 devices, leading to L2 being designated as G3. With each source within S now appropriately associated with a control level, the algorithm concludes its execution. The Python representation of Algorithm 1‘s outcome is visualized in Fig. 8. Using the outcomes of the control hierarchy identification, we can determine that the devices at the lowermost level—specifically, 192.168.1.10, 192.168.1.20, 192.168.1.30, 192.168.1.40, 192.168.1.50, and 192.168.1.60—correspond to PLCs. The devices at level 1, namely, 192.168.1.100 and 192.168.1.201, are capable of being either an HMI device or a SCADA station. Finally, the top-level entity, 192.168.1.200, can be identified as a SCADA station. Subsequently, the utilization of the vendor ID facilitated differentiation between
Fig. 9. Water Treatment SCADA device recognition output.
Fig. 10. Modbus RTU over TCP.
the HMI and the SCADA station: both 192.168.1.201 and 192.168.1.200 exhibited the vendor ID “Microsoft,” while the vendor ID for 192.168.1.100 was “Rockwell Automation.” This distinction led to the identification of 192.168.1.201 and 192.168.1.200 as SCADA stations, while 192.168.1.100 was categorized as an Allen Bradley HMI. In the subsequent phase of device fingerprinting, individual fingerprints were constructed for each PLC in the form of Feature2 matrices. These matrices were then compared against the lookup table (Table I) to ascertain their respective manufacturer and model. Consequently, this process unveiled that the PLCs correspond to the Allen Bradley Logix 1765 PLC. A log detailing these outcomes is depicted in Fig. 9.
V. FINGERPRINTING USING MODBUS-DATA
Modbus TCP/IP, or Modbus-TCP, is the Modbus RTU protocol functioning over Ethernet and integrating a TCP interface. In this configuration, the Modbus RTU message is enveloped within a TCP/IP framework and then dispatched across a network, as opposed to serial lines. Fig. 10 graphically illustrates the process through which a Modbus message becomes encapsulated within a TCP/IP message. Understanding the organizational structure of Modbus messages facilitates a thorough examination of their content. For instance, consider a captured packet: Modbus TCP/IP ADU= 0001 0000 0006 11 03 006B 0003. In this scenario: The Transaction ID is 0001, the Protocol ID is 0000, the Message Length is 0006 (indicating six subsequent bytes), the Unit ID is 11, the Function Code is 03, the Data Address of the first register requested is 006B, and the total number
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2546 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
Fig. 11. Modbus TCP/IP packet example.
of registers requested is 0003. This comprehension aids in pinpointing the unaltered elements of Modbus data unaffected by router actions, particularly useful for the purposes of device fingerprinting.
A. Approach and Results
The approach for device fingerprinting for non-Modbus versus Modbus-based systems is in principle the same. A difference is that while in the non-Modbus case, the fingerprinting features that we employ are in the TCP/IP headers, in the Modbus case, we rely on a different feature that is present in the lower-level Modbus header itself. Note the Modbus header feature is not available in a non-Modbus system, and so in the latter non-Modbus case we can only rely on the TCP/IP header features, and as a result, its data collection must occur at each device (as opposed to at each gateway/router), because in general, a gateway/router alters the original TCP/IP header. For the Modbus-based SCADA/ICS, the initial phase of device fingerprinting involves the extraction of the Modbus TCP/IP application data unit (ADU) from a TCP/IP packet. Given our understanding of how the Modbus packet is incorporated within a TCP/IP packet, the process becomes relatively straightforward once we have acquired a packet (e.g., using tools like Wireshark [36] or Tshark [37]). Upon capturing a packet, we accurately locate the Modbus packet’s within it and proceed with its extraction. An illustration of a captured example of a Modbus TCP/IP packet is presented in Fig. 11. After extracting Modbus packets, the subsequent task involves recognizing distinctive attributes within them for the purpose of device fingerprinting. Our investigation into the Modbus protocol and relevant literature unveiled that the predetermined registers accessible for reading and writing are standardized by the protocol. Examination and analysis of Modbus-TCP datasheets from diverse SCADA/ICS vendors, including Siemens, Schneider, GE, ABB, Wago, MegaTec, and Eaton Corporation, demonstrated that the register addresses manipulated by Modbus differ among manufacturers, consistent with [22]. Each I/O PLC module corresponds to a
Fig. 12. Simulated SCADA water treatment system.
specific preassigned range of registers, as determined by the manufacturer. For instance, GE Genius analog output registers encompass the range 401 501–401 900 [38], while Schneider ION7500/ION7600 analog output registers span from 40 011 to 40 277 [39]. In Siemens S7 PLCs, users have the option to specify start and end addresses, and the programming portal configures the devices to utilize addresses falling between 40 001 and 49 999 (it is important to note that these userdefined addresses differ from the actual register addresses; refer to [40] for detailed information). Due to the automatic linkage of SCADA devices with Modbus registers through the programming portal, a disparity arises between consecutive device offsets. For example, if the first device’s mapping is defined from 40 001 to 40 100, the mapping for the second device will initiate at 40 150 and conclude at 40 250. Given the distinct and unique behavior of each device based on manufacturer settings, the utilization of Modbus protocol for monitoring registers and subsequent comparison with a device reference database enables the creation of a device fingerprint for unfamiliar SCADA devices. This fingerprinting approach is employed for identifying devices connected to SCADA/ICS networks via the Modbus protocol.
B. CPS Case Study: S7-300 PLC SCADA
To validate the effectiveness of the fingerprinting approach reliant on Modbus data analysis, we executed a simulation of a Siemens s7-300 SCADA system. In order to ensure the fidelity of this simulated system to a real-world counterpart, we employed the “SIMATIC S7-PLCSIM” [41] software, which facilitates the creation of virtual Siemens PLCs for comprehensive precommissioning design validation among developers. The utilization of “SIMATIC S7-PLCSIM” permits the emulation of a single PLC at a time. Additionally, we harnessed the capabilities of “NetToPLCsim” [42] to enable network communication with the virtual PLCs hosted on S7-PLCSIM. This network interaction is facilitated through the PC’s network interface where S7-PLCSIM is operational. Acting as routers,
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


AL GHAZO AND KUMAR: ANDVI IN SCADA/ICS BY PASSIVE MONITORING 2547
Fig. 13. Ring topology SCADA system architecture.
“NetToPLCsim” emulates network scenarios. By employing these tools, we generated a faithful simulated control system that generates authentic operational data. The architecture of our created system, depicted in Fig. 12, mimics a realistic control configuration. It encompasses 4 s7300 PLCs, comprising one leader PLC, three follower PLCs, and a control room station. The implementation of the proposed Modbus data-based fingerprinting methodology was realized through a Python tool. Testing this tool on the collected data led to the successful identification of the PLCs as Siemens s7-300 models. Moreover, the hierarchical structure of the system control was accurately determined. Notably, data collection points were strategically positioned at the routers instead of individual devices, demonstrating the capability of the Modbus data analysis-based fingerprinting approach to function effectively with a reduced number of data collection points (in this instance, 2 instead of 4 as illustrated in the example).
VI. MINIMIZING MONITORING POINTS
Owing to the containment of packets generated by SCADA devices within their parent node levels, data collection must be carried out at the juncture between each device’s parent and child hierarchy levels. To comprehend the implications of this phenomenon, consider two real-life SCADA systems depicted in Figs. 13 and 14—both systems are operational and currently in use. In Fig. 13, a Siemens PLC-based system controls a water treatment facility and features a ring topology
in its SCADA network structure, thereby obviating the need for routers. On the other hand, Fig. 14 illustrates a Mitsubishi PLC-based system governing an animal food manufacturing factory, incorporating routers in its setup. A closer examination of these configurations reveals that within the ring topology (1st system), data must be collected at each device within the system (denoted by orange stars). In contrast, the latter type of system with routers and the implementation of a SCADA/ICS data packetization protocol like Modbus offers fewer data collection points. Accordingly, our approach for Modbus-based SCADA/ICS minimizes data collection points by strategically obtaining data at routers instead of directly at devices. In Fig. 14, the minimal number of required data collection points for device identification is marked as green stars (a total of 11, as opposed to 31). Remark 1: It should be noted that the proposed Modbusdata-based fingerprinting approach only uses the packet headers not affected by router actions, which reduces the number of data collection points needed to identify unknown devices. This is because the Modbus packets from various devices are still available at their nearest gateways, where they simply get multiplexed, without affecting the payload information containing the proposed fingerprinting features. While most SCADA/ICS networks employ Modbus, not all do, and in this case, the data collection upon multiplexing at gateways will alter the header information containing the needed fingerprinting features, so a reduction in data collection points cannot occur in a non-Modbus-based SCADA/ICS (and data must be collected at each device).
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2548 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
Fig. 14. Routers-based SCADA system architecture.
VII. ANDVI TOOL AND COMPLEXITY ANALYSIS
The fingerprinting approach for both Modbus and nonModbus (i.e., TCP/IP) based systems was implemented in Python. The captured packets from Wireshark [36] or Tshark [37] are obtained in a pcap file in CSV format. The Python code parses the CSV files and applies Algorithm 1 to identify the system control hierarchy. Then, the Python code again parses the CSV file to extract the fingerprinting features for each device and compares it with the fingerprinting reference dataset, and outputs the identified devices, again in CVS format. For the non-Modus case, the data were provided to us by the iTrust Lab, whereas for the Modbus case, we created our own network using PLCSim (PLC simulator) and NetToPLCSim (PLC network simulator). The tool successfully identified the control hierarchy as well as the network devices in both cases. The experimental results for both non-Modbus (Section IV-B) and Modbus (Section V-B) systems show that the ANDVI algorithm was able to identify the SCADA system devices with 100% accuracy. This is due to the fact that the ANDVI algorithm is a data-analytics approach, where the network data is analyzed to identify the unique signatures, rendering zero classification errors. An alternative approach would be to use a machine-learning classifier to identify the SCADA system devices but that being statistical may not have a 100% accuracy in general. When identifying a device in the network the accuracy needs to be 100% otherwise all the follow-up security vulnerability assessment and security measures will be irrelevant. Therefore, using the proposed
data analytics approach is advantageous over any statistical machine-learned classifier approach for device identification. The computational complexity of the algorithm is determined by the number of nodes in the network (N) and the number of edges (E = O(N2). Its worst-case running time of O(N2), which is the maximum time required to construct the system control hierarchy (list all nodes (N), identify their destination list Ds, and compare Ds for all nodes). On a standard computer, Core i5/2.2GHz/4GB RAM running Win 10, our algorithm took 15 s to identify the devices for the water treatment CPS from iTrust, which is a non-Modbus system. Further on a standard computer, Core i5/2.2 GHz/4GB RAM running Win 10, our algorithm took 12 s to identify the devices of the case study for the Modbus example.
VIII. CONCLUSION
We introduced a unique approach for identifying devices within SCADA/ICS systems through passive analysis of network data. This method involves a two-phase process. In the initial learning phase, an offline reference fingerprint database is established. Subsequently, during the recognition phase, an online two-step procedure is executed. The first step entails identifying the control hierarchy by analyzing communication patterns within the SCADA/ICS framework. Following this, the second step focuses on device identification by generating a fingerprint and cross-referencing it with the reference database from the initial stage, thereby determining device type, manufacturer, and model. The identification of the
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


AL GHAZO AND KUMAR: ANDVI IN SCADA/ICS BY PASSIVE MONITORING 2549
control hierarchy significantly enhances device recognition by facilitating a finer discrimination. In SCADA/ICS networks, due to the inherent control hierarchy, data from a device is confined to its parent level. To achieve comprehensive recognition, data collection must occur at each device or each router. The router approach reduces the number of required data collection points, requiring analyzing data segments unaffected by router actions. To leverage this, we introduced an innovative device recognition technique for Modbus-based SCADA/ICS. Our approach was implemented in Python for both non-Modbus and Modbus scenarios. To validate our solution, we tested it on a real-world Water Treatment SCADA system from the iTrust Lab and a simulated water treatment SCADA system. Our implementations were incorporated into the ANDVI tool. Furthermore, this tool was seamlessly integrated with existing vulnerability databases, automating the mapping of identified devices to their known vulnerabilities. The output from ANDVI can be integrated with our work on automated attack graph generation and visualization (A2G2V) [43] to map device-level vulnerabilities to systemlevel vulnerabilities, creating attack graphs that detail potential sequences of exploiting device vulnerabilities to compromise overarching security properties. By integrating our approach with strongly connected component induced min label cut (SCCiMLC) [44], [45], a minimal set of vulnerabilities can be pinpointed for mitigation to bolster the overall security of the system. This step of discovering devices in SCADA/ICS systems is fundamental to enhancing their cybersecurity. If the monitored network encompasses non-PLC devices, like laptops, well-established IT device fingerprinting techniques (e.g., [46] and [47]) can be applied in conjunction with our proposed SCADA/ICS device fingerprinting methodology.
ACKNOWLEDGMENT
The authors thank Yazan Okasha for the help with the implementation of the algorithm, and the iTrust team for sharing the Water Treatment System SCADA data, that they used for validating our proposed approach.
REFERENCES
[1] C.-W. Ten, G. Manimaran, and C.-C. Liu, “Cybersecurity for critical infrastructures: Attack and defense modeling,” IEEE Trans. Syst., Man, Cybern. A, Syst. Humans, vol. 40, no. 4, pp. 853–865, Jul. 2010. [2] C.-S. Cho, W.-H. Chung, and S.-Y. Kuo, “Cyberphysical security and dependability analysis of digital control systems in nuclear power plants,” IEEE Trans. Syst., Man, Cybern., Syst., vol. 46, no. 3, pp. 356–369, Mar. 2016. [3] “Cyberthreat defense report.” CyberEdge.com. 2023. Accessed: Dec. 9, 2023. [Online]. Available: https://cyber-edge.com/cdr/
[4] T. Nelso and M. Chaffin, Common Cybersecurity Vulnerabilities in Industrial Control Systems, Dept. Homeland Security, Washington, DC, USA, 2011, pp. 1–88. [5] S. A. Oliva and B. Crowe, “Network system and method for automatic discovery of topology using overhead bandwidth,” U.S. Patent 6 654 802. Feb. 2003. [6] D. Peterson, “Cyber security audit and attack detection toolkit,” U.S. Dept Energy, Digital Bond, Inc., Sunrise, FL, USA, Rep. NT43312, 2012.
[7] D. Duggan, M. Berg, J. Dillinger, and J. Stamp, “Penetration testing of industrial control systems,” Sandia Nat. Lab., Albuquerque, NM, USA, Rep. SAND2005-2846P, Mar. 2005. [8] M. Caselli, D. Hadžiosmanovic ́, E. Zambon, and F. Kargl, “On the feasibility of device fingerprinting in industrial control systems,” in Proc. Int. Workshop Crit. Inf. Infrastruct. Secur., 2013, pp. 155–166.
[9] K. Stouffer, J. Falco, and K. Scarfone, “Guide to Industrial control systems (ICS) security,” Nat.l Inst. Stand. Technol., document NIST SP 800-82, 2011. [10] “Secure water treatment tesetbed.” iTrust. 2018. Accessed: Dec. 9, 2023. [Online]. Available: https://itrust.sutd.edu.sg/testbeds/securewater-treatment-swat/ [11] L. Hansson, “Capture files from 4SICS geek lounge.” Netresec. 2018. Accessed: Dec. 9, 2023. [Online]. Available: https://www.netresec.com/ index.ashx?page=PCAP4SICS [12] T. Yardley. “ICS PCAPs.” Github. 2018. Accessed: Dec. 9, 2023. [Online]. Available: https://github.com/ITI/ICS-Security-Tools/ tree/master/pcaps/s7 [13] S.-H. Ahn, N.-U. Kim, and T.-M. Chung, “Big data analysis system concept for detecting unknown attacks,” in Proc. Int. Conf. Adv. Commun. Technol., 2014, pp. 269–272. [14] M. Feng and H. Xu, “Deep reinforecement learning based optimal defense for cyber-physical system in presence of unknown cyberattack,” in Proc. IEEE Symp. Series Comput. Intell. (SSCI), 2017, pp. 1–8. [15] A. T. Al Ghazo and R. Kumar, “ICS/SCADA device recognition: A hybrid communication-patterns and passive-fingerprinting approach,” in Proc. IFIP/IEEE Symp. Integr. Netw. Service Manage. (IM), 2019, pp. 19–24. [16] A. Al Ghazo, “A framework for cybersecurity of supervisory control and data acquisition (SCADA) systems and industrial control systems (ICS),” Ph.D. dissertation, Dept. Electr. Eng. Comput. Eng., Iowa State Univ., Ames, IA, USA, 2020. [17] “Cyber security.” Splunk. 2020. Accessed: Dec. 9, 2023. [Online]. Available: https://www.splunk.com/ [18] J. François, H. Abdelnur, R. State, and O. Festor, “PTF: Passive temporal fingerprinting,” in Proc. IFIP/IEEE Int. Symp. Integr. Netw. Manag. Workshops, 2011, pp. 289–296. [19] A. R. Beyah, I. D. Formby, and P. Srinivasan, “Device fingerprinting for cyber-physical systems,” U.S. Patent 15 556 136, May 2018. [20] S. Jeon, J.-H. Yun, S. Choi, and W.-N. Kim, “Passive fingerprinting of SCADA in critical infrastructure network without deep packet inspection,” 2016, arXiv:1608.07679. [21] R. Bodenheim, J. Butts, S. Dunlap, and B. Mullins, “Evaluation of the ability of the Shodan search engine to identify Internet-facing industrial control devices,” Int. J. Crit. Infrastruct. Prot., vol. 7, no. 2, pp. 114–123, 2014. [22] A. Keliris and M. Maniatakos, “Remote field device fingerprinting using device-specific Modbus information,” in Proc. IEEE Int. Midwest Symp. Circuits Syst. (MWSCAS), 2016, pp. 1–4.
[23] “Search engine for the Internet of everything.” Shodan. 2018. Accessed: Dec. 12, 2023. [Online]. Available: https://www.shodan.io/ [24] J. B. Radvanovsky and J. Brodsky, “Project shine: What we discovered and why you should care,” in Proc. SANS ICS Secur. Summit, Orlando, FL, USA, 2015, pp. 1–23. [25] T. Kiravuo, S. Tiilikainen, M. Särelä, and J. Manner, “Peeking under the skirts of a nation: Finding ICS vulnerabilities in the critical digital infrastructure,” in Proc. Eur. Conf. Cyber Warfare Secur., 2015, p. 137. [26] “Nmap.” 2020. Accessed: Dec. 9, 2023. [Online]. Available: https:// nmap.org/ [27] “The Nessus family.” Tenable. 2020. Accessed: Dec. 9, 2023. [Online]. Available: https://www.tenable.com/products/nessus [28] A. Cardenas, S. Amin, B. Sinopoli, A. Giani, A. Perrig, and S. Sastry, “Challenges for securing cyber physical systems,” in Proc. Workshop Future Direct. Cyber-Phys. Syst. Secur., vol. 5, 2009, pp. 1–7.
[29] S. Huang, C.-J. Zhou, S.-H. Yang, and Y.-Q. Qin, “Cyber-physical system security for networked Industrial processes,” Int. J. Autom. Comput., vol. 12, no. 6, pp. 567–578, 2015. [30] W.-H. Ko et al., “Robust dynamic watermarking for cyberphysical security of inverter-based resources in power distribution systems,” IEEE Trans. Ind. Electron., early access, Sep. 6, 2023, doi: 10.1109/TIE.2023.3303614
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.


2550 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 54, NO. 4, APRIL 2024
[31] J. Á. Fernández-Carrasco, X. Echeberria-Barrio, D. Paredes-García, F. Zola, and R. Orduna-Urrutia, “ChronoEOS 2.0: Device fingerprinting and EOSIO blockchain technology for on-running forensic analysis in an IoT environment,” Smart Cities, vol. 6, no. 2, pp. 897–912, 2023. [32] V. Kumar and K. Paul, “Device fingerprinting for cyber-physical systems: A survey,” ACM Comput. Surv., vol. 55, no. 14, pp. 1–41, 2023. [33] T. Bangemann et al., “State of the art in Industrial automation,” in Proc. Ind. Cloud-Based Cyber-Phys. Syst., 2014, pp. 23–47. [34] Applies to Programmable Controllers, IEC Standard 61131, 2013. Accessed: Dec. 9, 2023. [Online]. Available: https://webstore.iec.ch/ publication/4550&preview=1
[35] Enterprise-Control System Integration, IEC Standard 62264-2, 2020. Accessed: Dec. 9, 2023. [Online]. Available: https://webstore.iec.ch/ publication/67673 [36] Oui Lookup Tool. (2018). Wireshark. Accessed: Dec. 9, 2023. [Online]. Available: https://www.wireshark.org/tools/oui-lookup.html
[37] Tshark Dump and Analyze Network Traffic. (2018). Wireshark. Accessed: Dec. 9, 2023. [Online]. Available: https://www.wireshark.org/ docs/man-pages/tshark.html
[38] GE PLC Conversions Genius M10 Modbus TCP User Manual, Montana Ltd., Co., Mumbai, India, 2017. [39] “Modbus protocol and register map for ion devices.” Control. 2011. Accessed: Dec. 9, 2023. [Online]. Available: https://www.ccontrol.com/ support/dp/ION_Meter_Modbus.pdf
[40] (Siemens, Munich, Germany). S7—Open Modbus/TCP Communication. (2008). Accessed: Dec. 9, 2023. [Online]. Available: https:// cache.industry.siemens.com/dl/files/065/109745065/att_910292/v1/ modbus_tcp_pn_cpu_en-US.pdf [41] “Simatic S7-PLCSIM V5.4 SP8.” Siemens. 2019. Accessed: Dec. 9, 2023. [Online]. Available: https://support.industry.siemens.com/cs/ document/109750064/trial-software-simatic-s7-plcsim-v5-4-sp8?dti= 0&lc=en-WW [42] T. Wiens, “NetToPLCsim network extension for PLCsim.” 2018. Accessed: Dec. 9, 2023. [Online]. Available: https://usermanual.wiki/ Document/NetToPLCsimManualen.1468207178/view [43] A. T. Al Ghazo, M. Ibrahim, H. Ren, and R. Kumar, “A2G2V: Automatic attack graph generation and visualization and its applications to computer and SCADA networks,” IEEE Trans. Syst., Man, Cybern., Syst., vol. 50, no. 10, pp. 3488–3498, Oct. 2020. [44] A. T. A. Ghazo and R. Kumar, “Identification of critical-attacks set in an attack-graph,” in Proc. IEEE Annu. Ubiquitous Comput., Electron. Mobile Commun. Conf. (UEMCON), 2019, pp. 716–722.
[45] A. T. Al Ghazo and R. Kumar, “Critical attacks set identification in attack graphs for computer and SCADA/ICS networks,” IEEE Trans. Syst., Man, Cybern., Syst., vol. 53, no. 9, pp. 5604–5613, Sep. 2023. [46] N. Ab, “NetworkMiner.” Netresec. 2020. Accessed: Dec. 9, 2023. [Online]. Available: https://www.netresec.com/?page=Networkminer [47] A. Ornaghi and M. Valleri. Ettercap. (2020). Accessed: Dec. 9, 2023. [Online]. Available: https://www.ettercap-project.org/index.html
Alaa T. AL Ghazo (Member, IEEE) received the B.S. degree in electronics engineering from Yarmouk University, Irbid, Jordan, in 2009, the M.S. degree in automation and control engineering from Edinburgh Napier University, Edinburgh, U.K., in 2013, and the Dual Major Ph.D. degree in electrical and computer engineering from Iowa State University, Ames, IA, USA, in 2020. He was with LG Electronics, Amman, Jordan, from 2009 to 2010, Zoofi Tech, Al Khobar, Saudi Arabia, from 2010 to 2012, and Reborn Industries, Amman, from 2014 to 2015. He is an Assistant Professor with the Department of Mechatronics Engineering, The Hashemite University, Zarqa, Jordan. He was an Assistant Professor with The University of Hartford, West Hartford, CT, USA, from 2019 to 2021. His research interests include cyber–physical systems and cybersecurity, automation and control, artificial intelligence, and machine learning.
Ratnesh Kumar (Fellow, IEEE) received the B.Tech. degree in electrical engineering from the Indian Institute of Technology Kanpur (IIT Kanpur), Kanpur, India, in 1987, and the M.S. and Ph.D. degrees in electrical and computer engineering from the University of Texas at Austin, Austin, TX, USA, in 1989 and 1991, respectively. He is a Palmer Professor with the Department of Electrical and Computer Engineering, Iowa State University, Ames, IA, USA, where he directs the Embedded Software, Sensors, Networks, Cyberphysical, and Energy (ESSeNCE) Lab. Previously, he held faculty position with the University of Kentucky, Lexington, KY, USA, and various visiting positions with the University of Maryland at College Park, College Park, MD, USA; the Applied Research Laboratory, Pennsylvania State University, State College, PA, USA; NASA Ames, Mountain View, CA, USA; Idaho National Laboratory, Idaho Falls, ID, USA; the United Technologies Research Center, East Hartford, CT, USA; and Air Force Research Laboratory, Dayton, OH, USA. Dr. Kumar is a recipient of the D. R. Boylan Eminent Faculty Award for Research and Award for Outstanding Achievement in Research from Iowa State University, and also the Distinguished Alumni Award from IIT Kanpur. He received the Gold Medals for the Best EE Undergrad, the Best All Rounder, and the Best EE Project from IIT Kanpur, the Best Dissertation Award from UT Austin, and the Best Paper Award from the IEEE TRANSACTIONS ON AUTOMATION SCIENCE AND ENGINEERING, and has been a Keynote Speaker and a paper award recipient from multiple conferences. He is or has been an editor of several journals, including IEEE, SIAM, ACM, Springer, IET, and MDPI. He is a Fellow of AAAS and was a Distinguished Lecturer of the IEEE Control Systems Society.
Authorized licensed use limited to: Southeast University. Downloaded on July 26,2024 at 07:34:20 UTC from IEEE Xplore. Restrictions apply.